#pragma once

#include "AbstractX86_32Translator.h"

namespace oneCC::CodeGenerator::X86_32 {

class AsmTranslator final : public AbstractX86_32Translator {
public:
    AsmTranslator() = default;

    // Generated (test part)
    void AAA() override ;
    void AAD() override ;
    void AAM() override ;
    void AAS() override ;
    void ADC_AL_imm8(uint8_t op2) override ;
    void ADC_EAX_imm32(uint32_t op2) override ;
    void ADC_reg32_rm32(Register op1, RM op2) override ;
    void ADC_reg8_rm8(Register op1, RM op2) override ;
    void ADC_rm32_imm32(RM op1, uint32_t op2) override ;
    void ADC_rm32_imm8(RM op1, uint8_t op2) override ;
    void ADC_rm32_reg32(RM op1, Register op2) override ;
    void ADC_rm8_imm8(RM op1, uint8_t op2) override ;
    void ADC_rm8_reg8(RM op1, Register op2) override ;
    void ADD_AL_imm8(uint8_t op2) override ;
    void ADD_EAX_imm32(uint32_t op2) override ;
    void ADD_reg32_rm32(Register op1, RM op2) override ;
    void ADD_reg8_rm8(Register op1, RM op2) override ;
    void ADD_rm32_imm32(RM op1, uint32_t op2) override ;
    void ADD_rm32_imm8(RM op1, uint8_t op2) override ;
    void ADD_rm32_reg32(RM op1, Register op2) override ;
    void ADD_rm8_imm8(RM op1, uint8_t op2) override ;
    void ADD_rm8_reg8(RM op1, Register op2) override ;
    void ADX_imm8(uint8_t op3) override ;
    void AMX_imm8(uint8_t op3) override ;
    void AND_AL_imm8(uint8_t op2) override ;
    void AND_EAX_imm32(uint32_t op2) override ;
    void AND_reg32_rm32(Register op1, RM op2) override ;
    void AND_reg8_rm8(Register op1, RM op2) override ;
    void AND_rm32_imm32(RM op1, uint32_t op2) override ;
    void AND_rm32_imm8(RM op1, uint8_t op2) override ;
    void AND_rm32_reg32(RM op1, Register op2) override ;
    void AND_rm8_imm8(RM op1, uint8_t op2) override ;
    void AND_rm8_reg8(RM op1, Register op2) override ;
    void ARPL_rm16_reg16(RM op1, Register op2) override ;
    void CALLF_m16_32(uint32_ptr op1) override ;
    void CALLF_ptr16_32(uint32_ptr op1) override ;
    void CALL_rel32(uint32_t op1) override ;
    void CALL_rm32(RM op1) override ;
    void CBW() override ;
    void CDQ() override ;
    void CLC() override ;
    void CLD() override ;
    void CLI() override ;
    void CMC() override ;
    void CMPS_m16_m16(uint16_ptr op1, uint16_ptr op2) override ;
    void CMPS_m32_m32(uint32_ptr op1, uint32_ptr op2) override ;
    void CMPS_m8_m8(uint8_ptr op1, uint8_ptr op2) override ;
    void CMP_AL_imm8(uint8_t op2) override ;
    void CMP_EAX_imm32(uint32_t op2) override ;
    void CMP_reg32_rm32(Register op1, RM op2) override ;
    void CMP_reg8_rm8(Register op1, RM op2) override ;
    void CMP_rm32_imm32(RM op1, uint32_t op2) override ;
    void CMP_rm32_imm8(RM op1, uint8_t op2) override ;
    void CMP_rm32_reg32(RM op1, Register op2) override ;
    void CMP_rm8_imm8(RM op1, uint8_t op2) override ;
    void CMP_rm8_reg8(RM op1, Register op2) override ;
    void CS() override ;
    void CWD() override ;
    void CWDE() override ;
    void DAA() override ;
    void DAS() override ;
    void DEC_reg32(Register op1) override ;
    void DEC_rm32(RM op1) override ;
    void DEC_rm8(RM op1) override ;
    void DIV_rm32(RM op3) override ;
    void DIV_rm8(RM op4) override ;
    void DS() override ;
    void ENTER_imm16_imm8(uint16_t op2, uint8_t op3) override ;
    void ES() override ;
    void FCOM2_STi() override ;
    void FCOMP3_STi() override ;
    void FCOMP5_STi() override ;
    void FFREEP_STi() override ;
    void FSTP1_STi() override ;
    void FSTP8_STi() override ;
    void FSTP9_STi() override ;
    void FXCH4_STi() override ;
    void FXCH7_STi() override ;
    void GS() override ;
    void HLT() override ;
    void IDIV_rm32(RM op3) override ;
    void IDIV_rm8(RM op4) override ;
    void IMUL_reg32_rm32_imm32(Register op1, RM op2, uint32_t op3) override ;
    void IMUL_reg32_rm32_imm8(Register op1, RM op2, uint8_t op3) override ;
    void IMUL_rm32(RM op3) override ;
    void IMUL_rm8(RM op3) override ;
    void INC_reg32(Register op1) override ;
    void INC_rm32(RM op1) override ;
    void INC_rm8(RM op1) override ;
    void INS_m16_DX(uint16_ptr op1) override ;
    void INS_m32_DX(uint32_ptr op1) override ;
    void INS_m8_DX(uint8_ptr op1) override ;
    void INT1() override ;
    void INTO() override ;
    void INT_3() override ;
    void INT_imm8(uint8_t op1) override ;
    void IN_AL_DX() override ;
    void IN_AL_imm8(uint8_t op2) override ;
    void IN_EAX_DX() override ;
    void IN_EAX_imm8(uint8_t op2) override ;
    void IRET() override ;
    void IRETD() override ;
    void JBE_rel8(uint8_t op1) override ;
    void JB_rel8(uint8_t op1) override ;
    void JCXZ_rel8(uint8_t op1) override ;
    void JLE_rel8(uint8_t op1) override ;
    void JL_rel8(uint8_t op1) override ;
    void JMPF_m16_32(uint32_ptr op1) override ;
    void JMPF_ptr16_32(uint32_ptr op1) override ;
    void JMP_rel32(uint32_t op1) override ;
    void JMP_rel8(uint8_t op1) override ;
    void JMP_rm32(RM op1) override ;
    void JNBE_rel8(uint8_t op1) override ;
    void JNB_rel8(uint8_t op1) override ;
    void JNLE_rel8(uint8_t op1) override ;
    void JNL_rel8(uint8_t op1) override ;
    void JNO_rel8(uint8_t op1) override ;
    void JNP_rel8(uint8_t op1) override ;
    void JNS_rel8(uint8_t op1) override ;
    void JNZ_rel8(uint8_t op1) override ;
    void JO_rel8(uint8_t op1) override ;
    void JP_rel8(uint8_t op1) override ;
    void JS_rel8(uint8_t op1) override ;
    void JZ_rel8(uint8_t op1) override ;
    void LAHF() override ;
    void LDS_reg32_m16_32(Register op2, uint32_ptr op3) override ;
    void LEAVE() override ;
    void LEA_reg32_m(Register op1) override ;
    void LES_reg32_m16_32(Register op2, uint32_ptr op3) override ;
    void LOCK() override ;
    void LODS_m16(uint16_ptr op2) override ;
    void LODS_m32(uint32_ptr op2) override ;
    void LODS_m8(uint8_ptr op2) override ;
    void LOOPNZ_rel8(uint8_t op2) override ;
    void LOOPZ_rel8(uint8_t op2) override ;
    void LOOP_rel8(uint8_t op2) override ;
    void MOVS_m16_m16(uint16_ptr op1, uint16_ptr op2) override ;
    void MOVS_m32_m32(uint32_ptr op1, uint32_ptr op2) override ;
    void MOVS_m8_m8(uint8_ptr op1, uint8_ptr op2) override ;
    void MOV_AL_moffs8() override ;
    void MOV_EAX_moffs32() override ;
    void MOV_Sreg_rm16(RM op2) override ;
    void MOV_m16_Sreg(uint16_ptr op1) override ;
    void MOV_moffs32_EAX() override ;
    void MOV_moffs8_AL() override ;
    void MOV_reg32_imm32(Register op1, uint32_t op2) override ;
    void MOV_reg32_rm32(Register op1, RM op2) override ;
    void MOV_reg8_imm8(Register op1, uint8_t op2) override ;
    void MOV_reg8_rm8(Register op1, RM op2) override ;
    void MOV_rm32_imm32(RM op1, uint32_t op2) override ;
    void MOV_rm32_reg32(RM op1, Register op2) override ;
    void MOV_rm8_imm8(RM op1, uint8_t op2) override ;
    void MOV_rm8_reg8(RM op1, Register op2) override ;
    void MUL_rm32(RM op3) override ;
    void MUL_rm8(RM op3) override ;
    void NEG_rm32(RM op1) override ;
    void NEG_rm8(RM op1) override ;
    void NOP() override ;
    void NOT_rm32(RM op1) override ;
    void NOT_rm8(RM op1) override ;
    void OR_AL_imm8(uint8_t op2) override ;
    void OR_EAX_imm32(uint32_t op2) override ;
    void OR_reg32_rm32(Register op1, RM op2) override ;
    void OR_reg8_rm8(Register op1, RM op2) override ;
    void OR_rm32_imm32(RM op1, uint32_t op2) override ;
    void OR_rm32_imm8(RM op1, uint8_t op2) override ;
    void OR_rm32_reg32(RM op1, Register op2) override ;
    void OR_rm8_imm8(RM op1, uint8_t op2) override ;
    void OR_rm8_reg8(RM op1, Register op2) override ;
    void OUTS_DX_m16(uint16_ptr op2) override ;
    void OUTS_DX_m32(uint32_ptr op2) override ;
    void OUTS_DX_m8(uint8_ptr op2) override ;
    void OUT_DX_AL() override ;
    void OUT_DX_EAX() override ;
    void OUT_imm8_AL(uint8_t op1) override ;
    void OUT_imm8_EAX(uint8_t op1) override ;
    void PAUSE() override ;
    void POPA() override ;
    void POPAD() override ;
    void POPF() override ;
    void POPFD() override ;
    void POP_DS() override ;
    void POP_ES() override ;
    void POP_SS() override ;
    void POP_reg32(Register op1) override ;
    void POP_rm32(RM op1) override ;
    void PUSHA() override ;
    void PUSHAD() override ;
    void PUSHF() override ;
    void PUSHFD() override ;
    void PUSH_CS() override ;
    void PUSH_DS() override ;
    void PUSH_ES() override ;
    void PUSH_SS() override ;
    void PUSH_imm32(uint32_t op1) override ;
    void PUSH_imm8(uint8_t op1) override ;
    void PUSH_reg32(Register op1) override ;
    void PUSH_rm32(RM op1) override ;
    void RCL_rm32_1(RM op1) override ;
    void RCL_rm32_CL(RM op1) override ;
    void RCL_rm32_imm8(RM op1, uint8_t op2) override ;
    void RCL_rm8_1(RM op1) override ;
    void RCL_rm8_CL(RM op1) override ;
    void RCL_rm8_imm8(RM op1, uint8_t op2) override ;
    void RCR_rm32_1(RM op1) override ;
    void RCR_rm32_CL(RM op1) override ;
    void RCR_rm32_imm8(RM op1, uint8_t op2) override ;
    void RCR_rm8_1(RM op1) override ;
    void RCR_rm8_CL(RM op1) override ;
    void RCR_rm8_imm8(RM op1, uint8_t op2) override ;
    void REP() override ;
    void REPNZ() override ;
    void REPZ() override ;
    void RETF() override ;
    void RETF_imm16(uint16_t op1) override ;
    void RETN() override ;
    void RETN_imm16(uint16_t op1) override ;
    void ROL_rm32_1(RM op1) override ;
    void ROL_rm32_CL(RM op1) override ;
    void ROL_rm32_imm8(RM op1, uint8_t op2) override ;
    void ROL_rm8_1(RM op1) override ;
    void ROL_rm8_CL(RM op1) override ;
    void ROL_rm8_imm8(RM op1, uint8_t op2) override ;
    void ROR_rm32_1(RM op1) override ;
    void ROR_rm32_CL(RM op1) override ;
    void ROR_rm32_imm8(RM op1, uint8_t op2) override ;
    void ROR_rm8_1(RM op1) override ;
    void ROR_rm8_CL(RM op1) override ;
    void ROR_rm8_imm8(RM op1, uint8_t op2) override ;
    void SAHF() override ;
    void SALC() override ;
    void SAL_rm32_1(RM op1) override ;
    void SAL_rm32_CL(RM op1) override ;
    void SAL_rm32_imm8(RM op1, uint8_t op2) override ;
    void SAL_rm8_1(RM op1) override ;
    void SAL_rm8_CL(RM op1) override ;
    void SAL_rm8_imm8(RM op1, uint8_t op2) override ;
    void SAR_rm32_1(RM op1) override ;
    void SAR_rm32_CL(RM op1) override ;
    void SAR_rm32_imm8(RM op1, uint8_t op2) override ;
    void SAR_rm8_1(RM op1) override ;
    void SAR_rm8_CL(RM op1) override ;
    void SAR_rm8_imm8(RM op1, uint8_t op2) override ;
    void SBB_AL_imm8(uint8_t op2) override ;
    void SBB_EAX_imm32(uint32_t op2) override ;
    void SBB_reg32_rm32(Register op1, RM op2) override ;
    void SBB_reg8_rm8(Register op1, RM op2) override ;
    void SBB_rm32_imm32(RM op1, uint32_t op2) override ;
    void SBB_rm32_imm8(RM op1, uint8_t op2) override ;
    void SBB_rm32_reg32(RM op1, Register op2) override ;
    void SBB_rm8_imm8(RM op1, uint8_t op2) override ;
    void SBB_rm8_reg8(RM op1, Register op2) override ;
    void SCAS_m16(uint16_ptr op1) override ;
    void SCAS_m32(uint32_ptr op1) override ;
    void SCAS_m8(uint8_ptr op1) override ;
    void SHL_rm32_1(RM op1) override ;
    void SHL_rm32_CL(RM op1) override ;
    void SHL_rm32_imm8(RM op1, uint8_t op2) override ;
    void SHL_rm8_1(RM op1) override ;
    void SHL_rm8_CL(RM op1) override ;
    void SHL_rm8_imm8(RM op1, uint8_t op2) override ;
    void SHR_rm32_1(RM op1) override ;
    void SHR_rm32_CL(RM op1) override ;
    void SHR_rm32_imm8(RM op1, uint8_t op2) override ;
    void SHR_rm8_1(RM op1) override ;
    void SHR_rm8_CL(RM op1) override ;
    void SHR_rm8_imm8(RM op1, uint8_t op2) override ;
    void SS() override ;
    void STC() override ;
    void STD() override ;
    void STI() override ;
    void STOS_m16(uint16_ptr op1) override ;
    void STOS_m32(uint32_ptr op1) override ;
    void STOS_m8(uint8_ptr op1) override ;
    void SUB_AL_imm8(uint8_t op2) override ;
    void SUB_EAX_imm32(uint32_t op2) override ;
    void SUB_reg32_rm32(Register op1, RM op2) override ;
    void SUB_reg8_rm8(Register op1, RM op2) override ;
    void SUB_rm32_imm32(RM op1, uint32_t op2) override ;
    void SUB_rm32_imm8(RM op1, uint8_t op2) override ;
    void SUB_rm32_reg32(RM op1, Register op2) override ;
    void SUB_rm8_imm8(RM op1, uint8_t op2) override ;
    void SUB_rm8_reg8(RM op1, Register op2) override ;
    void TEST_AL_imm8(uint8_t op2) override ;
    void TEST_EAX_imm32(uint32_t op2) override ;
    void TEST_rm32_imm32(RM op1, uint32_t op2) override ;
    void TEST_rm32_reg32(RM op1, Register op2) override ;
    void TEST_rm8_imm8(RM op1, uint8_t op2) override ;
    void TEST_rm8_reg8(RM op1, Register op2) override ;
    void XCHG_reg32_EAX(Register op1) override ;
    void XCHG_reg32_rm32(Register op1, RM op2) override ;
    void XCHG_reg8_rm8(Register op1, RM op2) override ;
    void XLAT_m8(uint8_ptr op2) override ;
    void XOR_AL_imm8(uint8_t op2) override ;
    void XOR_EAX_imm32(uint32_t op2) override ;
    void XOR_reg32_rm32(Register op1, RM op2) override ;
    void XOR_reg8_rm8(Register op1, RM op2) override ;
    void XOR_rm32_imm32(RM op1, uint32_t op2) override ;
    void XOR_rm32_imm8(RM op1, uint8_t op2) override ;
    void XOR_rm32_reg32(RM op1, Register op2) override ;
    void XOR_rm8_imm8(RM op1, uint8_t op2) override ;
    void XOR_rm8_reg8(RM op1, Register op2) override ;


};

}